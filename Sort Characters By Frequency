public class Solution {
    public string FrequencySort(string s) {
        //not allow empty string
        if (s=="" || s.Length==1) return s;
        var charList1 = new Dictionary<char,int>();
        //get count for each character in s
        foreach (var c in s) {
            if(charList1.ContainsKey(c)) {
                charList1[c]++;
            }
            else {
                charList1.Add(c,1);
            }
        }
        
        //return string if size of dict = 1
        if (charList1.Count==1) {
            return s;
        }
        
        //convert dict to list 2 and sort characters by count
        var charList2 = charList1.ToList();
        charList2.Sort((pair1,pair2)=>pair2.Value.CompareTo(pair1.Value));
        
        //sort characters by alphabet whose counts are equal
        var charList3 = new List<char>();
        int currentCount = charList2[0].Value;
        string result = "";
        for (int i = 0; i<charList2.Count-1; i++) {
            //add key char to list 3
            charList3.Add(charList2[i].Key);
            //if count of next character in list 2 is different
            if(charList2[i+1].Value != currentCount) {
                //if list 3 has 1 member, replicate char to (count) times and add to result 
                if(charList3.Count==1) {
                    result += new String(charList3[0], currentCount);
                }
                else {
                    //sort list 3, replicate chars to (count) times and add to result 
                    charList3.Sort();
                    foreach (var c in charList3) {
                        result += new String(c, currentCount);
                    }
                }
                //update count = count of next character in list 2 then free list 3
                currentCount = charList2[i+1].Value;
                charList3 = new List<char>(); 
            }    
        }
        
        //for last element in list 2, if list 3 is empty, replicate last char to (count) times and add to result
        if(!charList3.Any()) {
            result += new String(charList2[charList2.Count-1].Key, currentCount);
        }
        //else sort list 3, replicate chars to (count) times and add to result
        else {
            charList3.Add(charList2[charList2.Count-1].Key);
            charList3.Sort();
            foreach (var c in charList3) {
                result += new String(c, currentCount);
            }
        }
        
        //return string
        return result;
    }
}
